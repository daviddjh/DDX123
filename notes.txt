4/3/24

Made a ray tracing pass with compute shader. Just displays a color.
Next steps: generate rays. display triangle.

2/4/24

Write up on why I needed the -tangent.w to correct bitangent in vertex shader.
Clean up code and commit.

1/15/24

Progress on fullscreen...

Created new "main_output_texture" texture, this is what the post processing shader writes to.

Deferred post processing shader can render 1920x1080 "main_render_texture" to 3840x2160 "main_output_texture"

This is hard coded though... need to make this adjustable

TODO:
- measure the performance impact of this additional "main_render_texture" 
- make output size adjustable. Currently renders the 1080p render texture to a 4k output texture (whether it's 4k or not..)
    Baulders Gate 3 display settings:
    - Windowed mode: Render Resolution == window resolution
    - Windowed fullscreen mode:  window resolution == display resoulution. Render resolution can vary.

12/22/23

Merry Christmas!!

Got SSAO working in a seperate compute shader!! :D

Also messed around with tone mapping, don't really like how washed out my Reinhard curve looks.
The "filmic" look I tried looks totally wack.

Now onto SSR!! And maybe a list of TODOs....

TODO:
    - Measure performance difference between SSAO in compute shader or not.
    - Make SSAO more efficient using MIP MAPS (I think?)
    - Tune in tonecurve

12/18/23

Got Compute Shaders working!

Using one now as a "Post Processing" shader. Currently just shades half the screen yellow.

Found some issues with my binding system (caused by needing to use a texture as a Unordered access resource)

The "main render texture" (which we are rendering to now, instead of the actual swap chain screen buffer)
is now bound to the online descriptor heap as both a render target view, and an Unordered Access view.

One problem I will need to solve is out texture_2d_table. The entire table has to be of type "Texture2D" (read only),
or "RWTexture2D<float4>", which is read and write.
    - I would like to have all the textures in one "bindless" table, but I may need to make multiple.
    - Currently, I'm binding the whole table as a "RW" UAV table, just for the compute shader.
    - Maybe I can make 2 "different" binding points (Texture2D and RWTexture2D) then bind them to the same table? Errors would be user consequence.

TODO:
- Come up with solution to texture binding / UAV issue
- Measure performance difference of recent changes:
    - "Main render texture" + copy instead of rendering to swap chain
    - Compute shader pass

- Add d_dx12 function for copy one texture to another
- Add d_dx12 function for compute dispatch

12/15/23

Many updates! Been writing in obsidian noteboot.

1. Added SSAO! From an implementation on https://learnopengl.com/Advanced-Lighting/SSAO
- Uploading random data in constant buffer and texture for better sampling
- Reduced performance heavily. Probably due to GBuffer texture reads an misses? Performance goes down when SSAO radius goes up.
- Want to move to a compute shader and see what happens!
- Want to invesigate how to improve performance. (GBufffer optimization, Mipmapping??)

2. ReVamped Shader parameters! No longer need to specify perameters when creating a shader.

3. Added shader / cpp interop! Constant buffer data structures are defined once for cpp and hlsl.

Next TODO:

Get Compute shaders working. Start with some post processing, move SSAO to there, eventually SSR.
Maybe do Environment maps?
Find out why SSAO is so low performance.
Improve editor!! - Want to select and view textures in ImGui (I already have this, but the texture is defined in cpp, can't be selected)
Change shader compilation. Want to improve shader workflow: Remove from build directory, compile to DXIL during build, hot shader reload.

11/8/23

Got constant buffer upload working! Loading a buffer of random values to the pixel shader for SSAO.
Need to document problems I saw and how I should go about fixing them.

10/24/23

Creating a plan for SSAO. Writing it down in OBSIDIAN file.

9/26/2023

Started getting a weird issue when the DX12 window is the main focus. It locks to 60fps???
Can't tell for the life of me why. No VSync. No frame limiters... Maybe the recent update to windows??
IDK.. its weird.. but to capture the frame times, I have to now "click off" of the window for the speed to go back up.

Finished updating the binding string lookup. It now uses const char* and evaluates the index at compile time.

One odd thing is that the userspace has to use the lookup everytime they want to bind something other than a texture (for now).

If I had a completely bindless system, would this be much of a problem? Shader would have fewer bind point names, and API would define those.

The user space can pass a "Debug Name" to name things like resources.

Anyways, shaved off 69Âµs of time in the CPU frame. No more std::map. :)

Onto SSAO!!

:D

13900k cpu - AVG: 77us MEDIAN: 67us

9/26/2023

Replaced binding point map with just an array as mentioned in previous notes.
Brought CPU_FRAME time down to:
13900k cpu - AVG: 129us (-17us) MEDIAN: 119us (-15ms)

Still gains to be had. Can eliminate string lookup by doing it at compile time with the constexpr.
Should shave off about another 40us.
Good Job David!!!

9/21/2023

Created a mapping from binding points to indexes in an array. (d_dx12/shaders.h)
The mapping should allow the programmer to use the "words" in the shader, and for the shader compiler
to easily lookup the index of a binding point given it's string.

Also, this should alow user space to still use c strings when defining a binding point. This should be able to be converted to index at compile time.

Only downside is it adds one extra step everytime you add a new binding point to a shader. The binding point, along with it's index, needs to also be added
to d_dx12/shaders.h before it can be used.

Brings up an interesting question of "who should be defining the space of binding points? the shader writer or the api?". In this case, if its the API, then
it makes things faster and easier for API writer, but places constrain and extra step on the shader writer. 

If we had something like JAI, we could parse the shader(s) first, then create the "constant" lookup table. This would avoid the extra step for shader writers.

This could be done now in something like python. Seems like it would add more complexity for little value.

Every day I inch a tad bit forward towards building this in python. This would be a reason to go over the edge if I find pre-parsing and generating a .h would
be of more value than I expect it will be.

TODO: Finish updating d_dx12.cpp with updated "string_lookup"

:-)

9/20/2023

Recalculated CPU and GPU frametime.
Used PresentMonCli and Superluminal.

CPU is entire render function except for d_dx12::present call
GPU is ms work done by gpu measured by PresentMonCli

1080p - Standard Forward Render
13900k cpu - AVG: 146us MEDIAN: 134us
4080   gpu - AVG: 601us MEDIAN: 599us

9/17/2023

GET RID OF STD LIB!

1080p:
13900k cpu - 650 - 750 microseconds
4080   gpu - 509 microseconds

4k:
13900k cpu - 4.45ms - much longer because we wait for the GPU? Need a GPU Busy and a CPU Busy?
4080   gpu - 2.43ms


8/30/2023

Next todo:
- Create seperate "user space" and "d_dx12" memory arenas.
- Replace all "new", "malloc", and "calloc" calls with arenas.

Idea: d_std gets it's own arena(s) so it's less constrained on memory allocations. See: os_debug_print

8/28/2023

Haven't touched this in a few months.
Need to remind myself of goals.

Off top of head: 
- Hand rolled allocator used everywhere
- d_array
- Tidy up d_dx12 api
- Post Processing (dof, bloom, display size detached from render size)
- Implement Screen Space Ambient Occlusion
- Implement Screen Space Reflections
- Drive towards NVidia ReSTIR
- Maybe gui improvements (add models / lights, scene management)?
- Maybe custom serializing for fast scene load / unload

5/24/2023

Added float print to d_std::os_debug_printf
Always uses three decimal places
- %f = float or double

5/22/2023

Added string print to d_std::os_debug_printf
- %s = c string
- %$ = d_std string

5/21/2023

Updated directory to remove DDX123_Lib and DDX123_Base. Added d_core and d_dx12 under ./code.

Added cleanup.bat - removes temp files in ./build

Cleaned up build script. Learned a new strat to change shell CD to script file location. "cd /d %~dp0".
Now scripts can be ran from anywhere, and the changes / execution will run from DDX123 folder.
Because of this, I could make the build script relative. All scripts have been changed to this relative way of running.

Can create a render target with a specific clear color. This will be used when calling clear_render_target(Texture*).
Gets rid of DirectX12 warning and supposedly improves performance.

Moved shader build / pipeline build to seperate file: shaders.cpp. Reduces complexity in main.cpp.

5/20/2023

Deferred Rendering is now able to do lighting and shadows look like Forward Shading.

Still some slight deviation in "grey hanging dish"

NOW DO ALL THE OTHER STUFF YOU NEED TO DO!! :D

5/16/2023

Got deferred shading looking 95% identical to forward shading ( minus the shadows ). Theres some odd discoloration in the "grey hanging dish".

Shadows don't work because deferred shading pass doesn't have light space position of fragment. Need to finish that and do final comparison.

Seems like I'm getting a memory error in the debugger whenever I let it run for a few min. and flip back and forth between forward vs deferred.
Need to debug my temp ring buffer.

Still need to clean up project:
- Delete unncessary folders / files
- Check in d_dx12 and d_core to github

5/7/2023

Got Gbuffer geometry pass working. Deferred shading pass can output albedo and scale with display_width, display_height.

Trying to output position in deferred shading pass creates a pipline creation error, probably something to do with shader compilation.

Future todo: use string utilities in d_core to improve shader compilation. (Output bin file, use shader names, debug print statements).

5/4/2023

Started on the gbuffers today. Need to create them all at the same time so they're right next to each other
in the descriptor heap. Due to the way OMSetRenderTargets works.

Will need to create a Shader Resource View for them in `bind_texture` like we do for depth stencils. SRV is
so shaders can sample from the texture

5/1/2023

Deferred Gbuffer shader now outputs an albedo buffer.

Areas of needed improvement:
- Look into using multiple vertex buffers? Why does shadow mapping need all those values in input_layout?
- Finally add my memory and string printing functions
- Delete all the unused code in create_shader
- Improve create shader - Create shader debug files for Pix and Nsight (?)
- Improve shader reflection
- Fix ugly shadow blurring
- Delete all old, unused code
- Delete current code that doesn't need to be there

TODO:

- Create normal, position, and roughness/metallic textures for Gbuffer
- Output normal, position, and roughness/metallic to respective textures
- Use Gbuffer to shade scene
- Add SSAO

4/30/2023

Both d_core and d_dx12 are now included directly into main.cpp.
- I should eventually decide whether d_core should be in a seperate repo, included in this repo as a sub-repo. Leaning towards yes.

Created code to switch between a forward and deferred rendering path.

TODO:

- Enable deferred rendering
    - Create deferred rendering shaders
    - Create g-buffer resources
- Add SSAO

4/17/2023

Made some updates to d_core. Added better debug logging to DDX123_ModelViewer::main.cpp.
Need to get the changes in DDX123_Lib::d_dx12.cpp.
Also should remove requirement for arena from _format_lit_string.

Should I compile d_core to .lib? Should I include it into d_dx12.cpp? Should I include d_dx12.cpp directly into DDX123_ModelViewer::main?

Idea: Make DDX123 root folder, ./code/main.cpp, ./code/d_dx12/d_dx12.cpp ./code/d_core/* ???

4/5/2023

Shadows Mapping + Rough PCF is in! The PCF could definitely be improved, but scene looks decent!
Feel proud of what I've made :D

Goals in no specific order:

- Add latest pic to my public site!!!
- SSAO
- SSR
    - Defered rendering
- Decouple display resolution from render resolution with post pass
- Cleanup of code
- Document code
- Performance Analysis + Tune up
- Custom cpu allocators + containers ( no more std )
- Fix PCF with Stratified Poisson Sampling - http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-16-shadow-mapping/ 

4/2/2023

Got orthographic shadow map working, could be better. Some blur in the shadows could help.
Also, shadow mapping doesn't work when perpendicular to the ground. Due to "up" direction in view matrix.
Just keep a view matrix and transform it, don't make a new one every frame.

4/2/2023

Kindof got shadow mapping working? Doesn't look very good, I think the precition of the shadow map buffer
is far too low. Seems like I have to adjust the BIAS value and camera position perfectly for it to work.

Why is that?

4/2/2023

Shadow Pass is working, now use in PBR shader!!

4/1/2023

Problem: bind_and_draw_model inserts new descriptors into heap regardless of if they're already there.

Solution: check if descriptor is already in online heap before placing in online heap.

3/29/2023

Jumped right into the Shadow Map pass. Found lots of problems with d_dx12 layer assumptions (automatic
viewport and scissor_rect selection).

Wrote a Shadow Map Shader. All it does is generate a depth texture in light space.

Do we really need to pass all the vertex attributes to the shadow map shader if it's only reading the
position??

Need to do a clean up pass where I try to remove code and naming inconsitincies. ("binding_point" vs "parameter_name")

Also need to do a NVidia Profile. Why is debug build 55fps???? Was gettign 300fps+ before???

3/26/2023

Made a dynameic per-frame data upload buffer. Implemented as a ring buffer. Currently using for direction
and color of directional light. Want to implement shadow map next. Looks like it will cause some changes
to dx12 idea of "render pass". Need to make multiple render passes integrate easier.

TODO:
Implement "render_pass" structs.
Use them to do shadow mapping.

3/5/2023

Got Physically Based Rendering in the sponza scene! I was having a problem because I was using the wrong
(unnormalized) normal, after fixing that, it worked! Transforming albedo from sRGB to linear made it look
better too. Planning on going back over the shader to comment on it and understand it more.

Noticing that I have to ender a very large light intensity for specular lights to work. Also have to tone 
down the attenuation, need to revert in the future. Think its related to my MVP matricies and the meshes 
being "far" from each other. Ex: still seeing z buffer max out an back of scene disapear at times.

TODO:
Notes on PBR shader.
Look into attenuation.
Directional "sun" light.
Shadows? (multi pass...)

3/5/2023

Got bindless textures working! Ended up storing texture descriptor indicies in texture struct temporarily.
Switched to RTX 4080, getting 300+ FPS in debug mode. Fixed building for release and release debug symbol mode. 
Getting 3000 - 4000 FPS in release mode! Not going to try an optimize any more at this time.

Going to work on PBR and d_core at the same time. Starting on formated strings in d_core, although I found
a memory bug.

2/28/2023

Began adding bindles textrues tonight. A bit sloppy. Don't really like how we're dividing up the descriptor
heap by default for GPU visible heaps, because what if that changes in the future. Guess I will fix it then.
Right now, we need to "bind" (copy descriptors over to texture section of online heap) all of the textures, then
really bind the texture section of the online heap, then draw the model. Some problems are arising here, such as: 
what happens when we have multiple models? How do we keep track of texture indicies after copying over all of the
texture descriptors (need to supply that information per draw call)?

2/12/2023

Got phong shading working! Z axis flip got me tripped up again. Had to flip both normal and tangent.
Now that the render is able to use mipmapping and phong shading, I will begin working on a base library
for the application. Goal is to remove std lib stuff.

TODO (start with):
1. Memory Management - overall and per frame arenas
2. String Strategy   - create new strings, format strings.. 
3. Print Paths       - Debug print with formating options
4. Containers        - Array, Map, any other container I need
5. Profiling         - Replace chrono using custom solution

In the future I could add more to this list, but I'd like to do all of these before I continue developing
the renderer.

2/08/2023

Got Normal Mapping working. With the option to not use normal mapping. Currently working on 
Phong shading. Only have ambient and diffuse. Diffuse is shading the wrong side of the triangles,
which makes me think that something is wrong with the normal / light direction vector.

For specular shading: need the view position. Thinking this should go in a global constant buffer
with the light position.

TODO:
1. Debug diffuse lighting direction.
2. Add view_pos and light_pos to global constant buffer
3. Finish Phong shading
4. Find the problems with performance! Loading and FPS! Not too much, but it seems light there could
be some easy gains lurking

1/30/2023

Mipmapping is working! Works a little funky with the upload buffer and having to remap it
after running UpdateSubresources. May want to implement the functionallity of UpdateSubresources
directly. Also, I should compress the textures the same time I generate the mipchain. Then 
save them and load them the next time they're needed.

Todo:
1. Start on lighting!
2. Compress textures
3. Save compressed mipchain for the next time the file needs to be loaded
4. Better upload buffer system

1/25/2023

Added the mouse controls! Now I can move and look around Sponza. The textures are very distracting
though with all the aliasing. I'm thinking I should figure that out before staring on lighting.

Todo:
1. Figure out texture mipmapping. Implement on sponza textures. OK to generate at runtime.
2. Implement Lighting! ( Problably something simple at first, first big goal being PBR with IBL )

1/24/2023

Todo:
1. Copy over code from DavidDx12_2 for controls (Mouse Capture - Rotate)
2. Implement Lighting! ( Problably something simple at first, first big goal being PBR with IBL )

Got the camera translating on a single plane with WASD, now we need mouse + rotation controls!

1/23/2023

Todo:
1. Copy over code from DavidDx12_2 for controls (WASD - Movement, Right Mouse + Drag - Rotate)
2. Implement Lighting! ( Problably something simple at first, first big goal being PBR with IBL )

Figured out a way to handle the transparent pixels in a texture. I just "discarded" the pixel if it's
alpha was less than 1. I guess this means it's depth was not written to the depth buffer because the
primitives behind it started appering. This is not the best solution, but it will work for now!

1/22/2023

Meshes now have a single vertex and a single index buffer. They have an array of draw calls that track
the vertex and index offsets to use when making the d3d12 draw call.

Got a blending state set up for alpha to work properly, now dont know what to do about the z depth for
alpha blended pixels. Depending on draw order, primitives at an alpha pixel could get depth compared out,
so nothing is drawn behind the alpha pixel anymore.

12/23/2022

Sponza is rendering correctly with textures! Had to flip texture coordinate back to default for sponza to 
be viewed correctly.

Todo:
1. Consider adding some sort of camera controls to validate rest of the sponza model is loaded properly
2. Clean up code before adding anything else. Getting a bit out of hand..

12/23/2022

Slowly getting there! Got sponza loaded with textures showing on a few objects infront of the cameras.
Textures on the fabric looks heavily aliased, need mip mapping.
Decoupled Materials from primitive_groups. Primative groups now store the index of the material they need.

Todo:
1. Fix matricies so model moving works
2. Consider adding some sort of camera controls to validate rest of the sponza model is loaded properly
3. Clean up code before adding anything else. Getting a bit out of hand..

12/5/2022

- Still working on sponza model load. The verticies, indicies, and textures are taking up a lot of room.
- Just giving each primitive_group it's own buffers and draw call, will need to optimize in the future.
- In the future will need to rewrite upload buffer code to support more buffers and clean up after upload.
- Seems like there is a problem with resource cleanup on the GPU, as the program fails to create a resource
    when not attached to RemedyBG.
    - Should add a "cleanup" function to model to cleanup the models resources. See if that works.
- Also, since I added these model data structures, I should clean up the global vars for vertex buffer, albedo texture, etc..

12/4/2022

- Currently working to improve model load code with the goal of Sponza being able to load properly

11/25/2022

- Loads the DamagedHelmet GLtf model and albedo texture.

TODO:
1. Clean up model / model load code, move to own file?
2. Add Model Matricies and other code to move models.
3. Add default scaling, controls, lighting

NOTES:

Alignment is important!! Texture wasn't diplaying properly because the destination location in the CopyTextureRegion function
wasn't aligned properly.

11/25/2022

- Made progress on screen resize and the moving screen causing freeze bug. Fixed by moving render out of windows message loop
- Added gltf file loader. Currently only works with files that have vertex color defined per vertex.
    - Moved to DrawIndexedInstanced by defalut

TODO:
1. Add texture to model load.
2. Clean up model / model load code, move to own file?
3. Add default scaling, controls, lighting

NOTES:

Due to the combination of backside culling and DirectX + opengl z axis being swapped, at first, the models weren't being shown.
It was only after I had added code to the model load that flipped the z axis that the models began to show. Originally, the z axis
of the cube was flipped, thus after the combination of Z buffer depth culling(?), and backside culling, nothing ended up on the render target.

11/15/2022

Started on window resize and move

TODO: Limit Screen resize, scale framebuffer to fullscreen??

11/15/2022

Added Dear ImGui Shutdown

TODO: Handle screen resize

11/14/2022

Got ImGui working!
Added avg FPS and frame MS.
Added IO handling for ImGui.

TODO: Shutdown ImGui. Check Refcount dx12 objects.

D_Renderer::render:
    Average Time Taken: 10.7ms
    Median Time Taken:  9.2ms

11/1/2022

Goal: Build a Model Viewer app that can load the Sponza Scene, as well as others

Results:
- Load scene dynamicaly when user enters scene path
- Responsibly manage resources for each loaded scene
- ImGui for GUI
- Camera to move around scene. uses keyboard and mouse controls
- option to make fullscreen